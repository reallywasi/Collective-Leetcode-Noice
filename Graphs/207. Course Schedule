class Solution {
public:
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        vector<vector<int>> adj(numCourses);
        vector<int> indegree(numCourses, 0);
        for (auto& pre : prerequisites) {
            int u = pre[1];  // from
            int v = pre[0];  // to
            adj[u].push_back(v);indegree[v]++;
                    }
        // Push all nodes with 0 indegree into the queue
        queue<int> q;
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0) q.push(i);
        } 
        vector<int> topo;  
        // BFS
        while (!q.empty()) {
            int node = q.front();
            q.pop();
            topo.push_back(node);          
            for (int nbr : adj[node]) {
                indegree[nbr]--;
                if (indegree[nbr] == 0)   q.push(nbr);
            }
        } 
        // If topological sort includes all courses, return it
        if (topo.size() == numCourses) return topo;
        // Else return empty array (cycle exists)
        return {};
    }
};
